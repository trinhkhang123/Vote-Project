/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface VoteInterface extends utils.Interface {
  functions: {
    "AddNominee(address)": FunctionFragment;
    "Balance(address)": FunctionFragment;
    "ID(address)": FunctionFragment;
    "IDD()": FunctionFragment;
    "Register(address)": FunctionFragment;
    "Votee(address)": FunctionFragment;
    "check(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AddNominee"
      | "Balance"
      | "ID"
      | "IDD"
      | "Register"
      | "Votee"
      | "check"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AddNominee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "Balance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ID",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "IDD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "Register",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "Votee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "check",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "AddNominee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IDD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Votee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;

  events: {};
}

export interface Vote extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VoteInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AddNominee(
      Nominee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    Balance(
      Nominee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ID(
      Voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    IDD(overrides?: CallOverrides): Promise<[string]>;

    Register(
      AddrVoter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    Votee(
      AddrNominee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    check(
      Voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  AddNominee(
    Nominee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  Balance(
    Nominee: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ID(
    Voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  IDD(overrides?: CallOverrides): Promise<string>;

  Register(
    AddrVoter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  Votee(
    AddrNominee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  check(
    Voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    AddNominee(
      Nominee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    Balance(
      Nominee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ID(
      Voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    IDD(overrides?: CallOverrides): Promise<string>;

    Register(
      AddrVoter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    Votee(
      AddrNominee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    check(
      Voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    AddNominee(
      Nominee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    Balance(
      Nominee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ID(
      Voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    IDD(overrides?: CallOverrides): Promise<BigNumber>;

    Register(
      AddrVoter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    Votee(
      AddrNominee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    check(
      Voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AddNominee(
      Nominee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    Balance(
      Nominee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ID(
      Voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IDD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Register(
      AddrVoter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    Votee(
      AddrNominee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    check(
      Voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
